// Code generated by MockGen. DO NOT EDIT.
// Source: ./backlog.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	arbutil "github.com/offchainlabs/nitro/arbutil"
	message "github.com/offchainlabs/nitro/broadcaster/message"
)

// MockBacklog is a mock of Backlog interface.
type MockBacklog struct {
	ctrl     *gomock.Controller
	recorder *MockBacklogMockRecorder
}

// MockBacklogMockRecorder is the mock recorder for MockBacklog.
type MockBacklogMockRecorder struct {
	mock *MockBacklog
}

// NewMockBacklog creates a new mock instance.
func NewMockBacklog(ctrl *gomock.Controller) *MockBacklog {
	mock := &MockBacklog{ctrl: ctrl}
	mock.recorder = &MockBacklogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBacklog) EXPECT() *MockBacklogMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockBacklog) Append(bm *message.BroadcastMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", bm)
	ret0, _ := ret[0].(error)
	return ret0
}

// Append indicates an expected call of Append.
func (mr *MockBacklogMockRecorder) Append(bm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockBacklog)(nil).Append), bm)
}

// Get mocks base method.
func (m *MockBacklog) Get(start, end arbutil.MessageIndex) (*message.BroadcastMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", start, end)
	ret0, _ := ret[0].(*message.BroadcastMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBacklogMockRecorder) Get(start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBacklog)(nil).Get), start, end)
}
